var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "full";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig1_1 = require("./GameConfig1");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig1_1.default.width, GameConfig1_1.default.height);
        else
            Laya.init(GameConfig1_1.default.width, GameConfig1_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig1_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig1_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig1_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig1_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig1_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig1_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig1_1.default.startScene && Laya.Scene.open(GameConfig1_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig1":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var Vector2 = Laya.Vector2;
var PloygenDetection_1 = require("./PloygenDetection");
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        var posArr = [300, 300, 500, 300, 500, 600, 300, 600, 300, 300];
        _this.DrawPolygen(posArr);
        var posArr2 = [400, 400, 600, 400, 600, 800, 400, 800, 400, 400];
        _this.DrawPolygen(posArr2);
        var posArr3 = [800, 400, 1000, 400, 1000, 800, 800, 800, 800, 400];
        _this.DrawPolygen(posArr3);
        _this.ShowResult(PloygenDetection_1.default.IsRectPolygonIntersect(_this.CreatePolygon(posArr), _this.CreatePolygon(posArr3)));
        return _this;
        // let posArr = [300,200,500,240,600,400,340,800,100,400,300,200];
        // this.DrawPolygen(posArr);
        // let posArr2 = [1000,300,800,400,600,800,1200,500,1000,300]
        // this.DrawPolygen(posArr2);
        // this.ShowResult(PolygonDetect.IsMultiPolygonIntersection(this.CreatePolygon(posArr),this.CreatePolygon(posArr2)));
        // let posArr3 = [1000,300,1200,600,1500,100,1600,700,1000,300]
        // this.DrawPolygen(posArr3);
        // this.Line = this.CreateSprite();
        // this.point = this.CreateSprite();
        // Laya.stage.on(Laya.Event.MOUSE_MOVE,this,()=>{
        //     this.Line.graphics.clear();
        //     this.point.graphics.clear();
        //     this.IsIntersect(this.Line,posArr2); 
        //     this.IsInPolygon(this.point,posArr2);     
        // })
    }
    GameUI.prototype.IsInPolygon = function (sp, posArr) {
        sp.graphics.drawCircle(Laya.stage.mouseX, Laya.stage.mouseY, 5, "#00ff00");
        var b = PloygenDetection_1.default.IsPointInPolygon(new Laya.Vector2(Laya.stage.mouseX, Laya.stage.mouseY), this.CreatePolygon(posArr));
        this.ShowResult(b);
    };
    GameUI.prototype.IsIntersect = function (sp, posArr) {
        var p1 = new Vector2(Laya.stage.width / 2, Laya.stage.height / 2);
        var p2 = new Vector2(Laya.stage.mouseX, Laya.stage.mouseY);
        sp.graphics.drawLine(p1.x, p1.y, p2.x, p2.y, "#00ff00");
        var b1;
        var index = 0;
        for (var i = 0; i < posArr.length; i += 2) {
            var q1 = new Vector2(posArr[i], posArr[i + 1]);
            var q2 = new Vector2(posArr[i + 2], posArr[i + 3]);
            if (i != posArr.length - 2) {
                b1 = PloygenDetection_1.default.IsSegmentIntersect(p1, p2, q1, q2);
                if (b1) {
                    this.ShowResult(b1);
                    index++;
                    console.debug("相交的线段为" + index + "：", q1.x, q1.y, q2.x, q2.y);
                    if (this.currentPoint == null && this.currentPoint != i) {
                        this.point = this.CreateSprite();
                        this.currentPoint = i;
                    }
                    this.CreateIntersectPoint(this.point, p1, p2, q1, q2);
                }
            }
            else {
                q2 = new Vector2(posArr[0], posArr[1]);
                b1 = PloygenDetection_1.default.IsSegmentIntersect(p1, p2, q1, q2);
                if (b1) {
                    this.ShowResult(b1);
                    index++;
                    console.debug("相交的线段为" + index + "：", q1.x, q1.y, q2.x, q2.y);
                    var sp2 = void 0;
                    if (this.currentPoint == null && this.currentPoint != i) {
                        sp2 = this.CreateSprite();
                        this.currentPoint = i;
                    }
                    this.CreateIntersectPoint(sp2, p1, p2, q1, q2);
                }
            }
        }
        if (index == 0)
            this.ShowResult(false);
    };
    GameUI.prototype.CreateIntersectPoint = function (sp, p1, p2, q1, q2) {
        if (sp == null)
            return;
        var p = PloygenDetection_1.default.GetCrossPoint(p1, p2, q1, q2);
        sp.graphics.clear();
        if (p)
            sp.graphics.drawCircle(p.x, p.y, 10, "#0000ff");
    };
    GameUI.prototype.CreateSprite = function () {
        var sp = new Laya.Sprite();
        Laya.stage.addChild(sp);
        return sp;
    };
    GameUI.prototype.CreatePolygon = function (arr) {
        var _arr = new Array();
        for (var i = 0; i < arr.length; i += 2) {
            if (i != arr.length - 1) {
                _arr.push(new Vector2(arr[i], arr[i + 1]));
                this.CreateLable("(" + arr[i] + "," + arr[i + 1] + ")", new Vector2(arr[i], arr[i + 1]));
            }
            else {
                _arr.push(new Vector2(arr[i], arr[0]));
                this.CreateLable("(" + arr[i] + "," + arr[0] + ")", new Vector2(arr[i], arr[i + 1]));
            }
        }
        var polygon = new PloygenDetection_1.Polygon(_arr);
        return polygon;
    };
    GameUI.prototype.DrawPolygen = function (posArr, color, lineWidth) {
        var sp = new Laya.Sprite();
        Laya.stage.addChild(sp);
        var _color = color != null ? color : "#ff0000";
        var _width = lineWidth != null ? lineWidth : 5;
        var startPos = new Vector2(0, 0);
        sp.graphics.drawLines(startPos.x, startPos.y, posArr, _color, _width);
    };
    GameUI.prototype.CreateLable = function (content, pos) {
        var label = new Laya.Label();
        label.name = "text";
        label.width = 100;
        label.height = 100;
        label.pivotX = 50;
        label.pivotY = 50;
        label.pos(pos.x, pos.y);
        label.bold = true;
        label.font = "SimHei";
        label.text = content;
        label.fontSize = 20;
        label.align = "center";
        label.valign = "middle";
        label.color = "#ffffff";
        Laya.stage.addChild(label);
        return label;
    };
    GameUI.prototype.ShowResult = function (b) {
        var label = this.getChildByName("msg");
        if (b) {
            if (label)
                label.text = "相交";
        }
        else {
            if (label)
                label.text = "不相交";
        }
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":5,"./PloygenDetection":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector2 = Laya.Vector2;
/**
 * 参考https://blog.csdn.net/stevenkylelee/article/details/88075814
 *
*/
var PolygonDetect = /** @class */ (function () {
    function PolygonDetect() {
    }
    /**
     * 特殊情况，两个矩形是否相交
     * @param polygon1
     * @param polygon2
     */
    PolygonDetect.IsRectPolygonIntersect = function (polygon1, polygon2) {
        return this.PointInPolygon(polygon1, polygon2);
    };
    /**
     * 判断两个多边形是否相交,(1)包含情况（2）完全不想交（3）相交
     * 判断条件：点在内部，边相交
     * @param Polygon1 多边形1
     * @param Polygon2 多边形2
     */
    PolygonDetect.IsMultiPolygonIntersection = function (Polygon1, Polygon2) {
        return this.SegementDetect(Polygon1, Polygon2) || this.PointInPolygon(Polygon1, Polygon2);
    };
    /**
     * 判断点是否在多边形内部
     * 几种特殊情况，（1）点在边上 （2）边不是水平的 （3）多边形顶点与目标点相交，属于纵坐标较大的顶点则计数，否则忽略
     * @param point 点
     * @param Polygon 多边形
     */
    PolygonDetect.IsPointInPolygon = function (point, Polygon) {
        var pointArr = new Array();
        var lenght = Polygon.points.length;
        var _loop_1 = function (i) {
            var pt1 = Polygon.points[i];
            var pt2 = void 0;
            if (i == lenght - 1)
                pt2 = Polygon.points[0];
            else
                pt2 = Polygon.points[i + 1];
            if (pt1.y == point.y && pt2.y == point.y)
                return out_i_1 = i, "continue"; //射线与多边形线段重合
            if (pt1.y == point.y) { //射线与多边形某个线段初始顶点相交
                var pt0 = i == 0 ? Polygon.points[lenght - 1] : Polygon.points[i - 1];
                if ((pt0.y - pt1.y) * (pt2.y - pt1.y) > 0) {
                    return out_i_1 = i, "continue";
                }
                else {
                    i++;
                }
            }
            if (pt2.y == point.y) { //射线与多边形某个线段结束顶点相交
                var pt3 = i == lenght - 2 ? Polygon.points[0] : i == lenght - 1 ? Polygon.points[1] : Polygon.points[i + 2];
                if ((pt1.y - pt2.y) * (pt3.y - pt2.y) > 0) {
                    return out_i_1 = i, "continue";
                }
                else {
                    i++;
                }
            }
            var c = this_1.GetCrossPoint(pt1, pt2, point, new Vector2(Laya.stage.width, point.y));
            if (c != null && c.x > point.x) {
                if (!pointArr.some(function (p) { return p.x == c.x && p.y == c.y; })) {
                    pointArr.push(c);
                }
            }
            out_i_1 = i;
        };
        var this_1 = this, out_i_1;
        for (var i = 0; i < lenght; i++) {
            _loop_1(i);
            i = out_i_1;
        }
        if (pointArr.length % 2 == 1)
            return true;
        return false;
    };
    /**
     * "快速排斥":以两条线段为对角线的矩形，如果不重合，两线段一点不相交；aabb包围盒是否相交
     * "跨立实验"：如果两个线段相交，必须跨立，以一条线段为基准，另一条线段两端点一定在这条线段两侧，利用向量叉积
     * 线段平行重合的情况暂时未考虑
     */
    PolygonDetect.IsSegmentIntersect = function (p1, p2, q1, q2) {
        //快速排斥
        var rect = Math.min(p1.x, p2.x) <= Math.max(q1.x, q2.x) &&
            Math.min(q1.x, q2.x) <= Math.max(p1.x, p2.x) &&
            Math.min(p1.y, p2.y) <= Math.max(q1.y, q2.y) &&
            Math.min(q1.y, q2.y) <= Math.max(p1.y, p2.y);
        //跨立实验
        //q1,q2跨立线段p1p2
        var r1 = this.SegmentDetect(this.sub(p2, p1), this.sub(q1, p1), this.sub(q2, p1));
        //p1,p2跨立线段q1q2
        var r2 = this.SegmentDetect(this.sub(q2, q1), this.sub(p1, q1), this.sub(p2, q1));
        if (rect && r1 && r2)
            return true;
        return false;
    };
    PolygonDetect.CreatePolygon = function (arr) {
        var _arr = new Array();
        for (var i = 0; i < arr.length; i += 2) {
            if (i != arr.length - 1) {
                _arr.push(new Vector2(arr[i], arr[i + 1]));
                this.CreateLable("(" + arr[i] + "," + arr[i + 1] + ")", new Vector2(arr[i], arr[i + 1]));
            }
            else {
                _arr.push(new Vector2(arr[i], arr[0]));
                this.CreateLable("(" + arr[i] + "," + arr[0] + ")", new Vector2(arr[i], arr[i + 1]));
            }
        }
        var polygon = new Polygon(_arr);
        return polygon;
    };
    PolygonDetect.CreateLable = function (content, pos) {
        var label = new Laya.Label();
        label.name = "text";
        label.width = 100;
        label.height = 100;
        label.pivotX = 50;
        label.pivotY = 50;
        label.pos(pos.x, pos.y);
        label.bold = true;
        label.font = "SimHei";
        label.text = content;
        label.fontSize = 20;
        label.align = "center";
        label.valign = "middle";
        label.color = "#ffffff";
        Laya.stage.addChild(label);
        return label;
    };
    /**
     * 多边形的点再另一个多边形内部
     * @param polygon1
     * @param polygon2
     */
    PolygonDetect.PointInPolygon = function (polygon1, polygon2) {
        for (var i = 0; i < polygon1.points.length; ++i) {
            var pt = polygon1.points[i];
            var b = this.IsPointInPolygon(pt, polygon2);
            if (b)
                return b;
        }
        for (var i = 0; i < polygon2.points.length; ++i) {
            var pt = polygon2.points[i];
            var b = this.IsPointInPolygon(pt, polygon1);
            if (b)
                return b;
        }
        return false;
    };
    /**
     * 多边形的线段与另一个多边形线段相交
     * @param polygon1
     * @param polygon2
     */
    PolygonDetect.SegementDetect = function (polygon1, polygon2) {
        // 线段相交
        for (var i = 0; i < polygon1.points.length; ++i) {
            var seg1pt1 = polygon1.points[i];
            var seg1pt2 = polygon1.points[i + 1];
            if (i == polygon1.points.length - 1) {
                seg1pt2 = polygon1.points[0];
            }
            for (var j = 0; j < polygon2.points.length; ++j) {
                var seg2pt1 = polygon2.points[j];
                var seg2pt2 = polygon2.points[j + 1];
                if (j == polygon2.points.length - 1) {
                    seg2pt2 = polygon2.points[0];
                }
                var b = this.IsSegmentIntersect(seg1pt1, seg1pt2, seg2pt1, seg2pt2);
                if (b)
                    return b;
            }
        }
        return false;
    };
    /**
     * 求两个线段的交点
     * @param seg1
     * @param seg2
     */
    PolygonDetect.GetCrossPoint = function (p1, p2, q1, q2) {
        if (!this.IsSegmentIntersect(p1, p2, q1, q2))
            return null;
        var area_abc = (p1.x - q1.x) * (p2.y - q1.y) - (p1.y - q1.y) * (p2.x - q1.x);
        var area_abd = (p1.x - q2.x) * (p2.y - q2.y) - (p1.y - q2.y) * (p2.x - q2.x);
        var area_cda = (q1.x - p1.x) * (q2.y - p1.y) - (q1.y - p1.y) * (q2.x - p1.x);
        var area_cdb = area_cda + area_abc - area_abd;
        //计算交点坐标 
        var t = area_cda / (area_abd - area_abc);
        var dx = t * (p2.x - p1.x), dy = t * (p2.y - p1.y);
        return new Vector2(p1.x + dx, p1.y + dy);
    };
    /**
     * 线段相交检测
     * @param p 线段0
     * @param p1 线段1
     * @param p2 线段2
     */
    PolygonDetect.SegmentDetect = function (p, p1, p2) {
        var c1 = this.cross(p, p1);
        var c2 = this.cross(p, p2);
        //如果在左右两边，相乘为负数
        if (c1 * c2 <= 0)
            return true;
        return false;
    };
    /**
     * 向量差乘
     * @param v1 向量1
     * @param v2 向量2
     */
    PolygonDetect.cross = function (v1, v2) {
        return v1.x * v2.y - v2.x * v1.y;
    };
    /**
     * 向量相减
     * @param v1 向量1
     * @param v2 向量2
     */
    PolygonDetect.sub = function (v1, v2) {
        return new Vector2(v1.x - v2.x, v1.y - v2.y);
    };
    return PolygonDetect;
}());
exports.default = PolygonDetect;
var Segment = /** @class */ (function () {
    function Segment(_point1, _point2) {
        this.point1 = _point1;
        this.point2 = _point2;
    }
    return Segment;
}());
exports.Segment = Segment;
var Polygon = /** @class */ (function () {
    function Polygon(_points) {
        this.points = _points;
    }
    return Polygon;
}());
exports.Polygon = Polygon;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
